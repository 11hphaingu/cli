/**
 * Module representing the port for commander
 * @module commander-port
 */

import { Command } from "commander";
import figlet from "figlet";
import { identity, pipe } from "fp-ts/lib/function";
import { readPkgJsonFile } from "impl/helpers";
import path from "path";
import { Either, TE } from "yl-ddd-ts";
import { initSetupEslintCommand } from "./commander/init-setup-eslint.command";
import { prop } from "ramda";
import { initCommanderHavester } from "./commander/init-harvester.cmd";

const IS_TEST = process.env.IS_TEST;

const initCommand = () =>
  pipe(
    IS_TEST
      ? path.resolve(__dirname, "..")
      : path.resolve(__dirname, "../../.."),
    readPkgJsonFile,
    TE.map((pkgJson) => ({ pkgJson, program: new Command(pkgJson.name) })),
    TE.tapEither(({ pkgJson, program }) =>
      Either.tryCatch(
        () =>
          program
            .description("CLI for Yltech dev")
            .version(pkgJson.version || "1.0.1"),
        identity,
      ),
    ),
    TE.map(prop("program")),
  );

/**
 * Factory function to create a CLI command for setting up ESLint and TypeScript configurations.
 * This function sets up the command-line interface using the 'commander' library,
 * reads the package.json file, and configures the CLI command with options and an action handler.
 *
 * @param handler - A handler function that performs the setup logic. It takes the project path and options as arguments
 * and returns a TaskEither representing an asynchronous computation that can fail.
 *
 * @returns A TaskEither representing the result of setting up the CLI command, where the left side is an error
 * and the right side is the successful result.
 *
 * @example
 * ```typescript
 * const handler = (projectPath: string, options: UnknownRecord) =>
 *   TE.tryCatch(
 *     async () => {
 *       // Your setup logic here
 *     },
 *     (reason) => new Error(String(reason))
 *   );
 *
 * const setupCommand = commandFactory(handler);
 * setupCommand().then(result => {
 *   if (Either.isLeft(result)) {
 *     console.error(result.left);
 *   } else {
 *     console.log('Setup completed successfully.');
 *   }
 * });
 * ```
 */
export const commandFactory = () =>
  pipe(
    initCommand(),
    TE.tapEither(initSetupEslintCommand),
    TE.tapEither(initCommanderHavester),
  );
/**
 * Factory function to create a handler for setting up TypeScript and ESLint configurations.
 * This handler is intended for use within a command generated by `commandFactory`.
 *
 * @param progressTrait - An implementation of `ProgressTrait` to manage progress updates.
 * @param setupDevEnv - An implementation of `ISetupDevEnv` that provides methods for setting up the development environment.
 *
 * @returns A handler function that takes a project path and options, returning a `TaskEither` representing the asynchronous
 * setup process which may fail.
 *
 * @template P - Type extending `Progress`, used for progress tracking.
 *
 * @example
 * ```typescript
 * const progressTrait = new MyProgressTrait();
 * const setupDevEnv = new MySetupDevEnv();
 *
 * const handler = prepareTsAndEslWith(progressTrait, setupDevEnv);
 *
 * const setupCommand = commandFactory(handler);
 * setupCommand().then(result => {
 *   if (Either.isLeft(result)) {
 *     console.error(result.left);
 *   } else {
 *     console.log('Setup completed successfully.');
 *   }
 * });
 * ```
 */

export const commanderInstance = () => {
  return pipe(
    initCommand(),
    TE.tapEither(initSetupEslintCommand),
    TE.tapEither(initCommanderHavester),
    TE.tapIO((p) => () => {
      console.log(figlet.textSync("Yang Lake Tech CLI"));
      p.parse();
    }),
  );
};
